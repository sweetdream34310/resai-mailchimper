// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package redis

import (
	models "github.com/cloudsrc/api.awaymail.v1.go/src/shared/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AggregateIndex provides a mock function with given fields: idx, query
func (_m *Repository) AggregateIndex(idx string, query ...interface{}) int64 {
	var _ca []interface{}
	_ca = append(_ca, idx)
	_ca = append(_ca, query...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, ...interface{}) int64); ok {
		r0 = rf(idx, query...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CreateInboxIndex provides a mock function with given fields: user
func (_m *Repository) CreateInboxIndex(user models.UserSession) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.UserSession) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSentIndex provides a mock function with given fields: user
func (_m *Repository) CreateSentIndex(user models.UserSession) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.UserSession) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelCache provides a mock function with given fields: idx, keys
func (_m *Repository) DelCache(idx string, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, idx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(idx, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCache provides a mock function with given fields: idx, query
func (_m *Repository) GetCache(idx string, query string) interface{} {
	ret := _m.Called(idx, query)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(idx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetKey provides a mock function with given fields: key
func (_m *Repository) GetKey(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetKeysPrefix provides a mock function with given fields: prefix
func (_m *Repository) GetKeysPrefix(prefix string) []string {
	ret := _m.Called(prefix)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetPushCache provides a mock function with given fields: key, items
func (_m *Repository) GetPushCache(key string, items ...interface{}) ([]string, error) {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, items...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []string); ok {
		r0 = rf(key, items...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(key, items...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrKey provides a mock function with given fields: key
func (_m *Repository) IncrKey(key string) {
	_m.Called(key)
}

// PushCache provides a mock function with given fields: key, item
func (_m *Repository) PushCache(key string, item string) error {
	ret := _m.Called(key, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchIndex provides a mock function with given fields: idx, query
func (_m *Repository) SearchIndex(idx string, query ...interface{}) []interface{} {
	var _ca []interface{}
	_ca = append(_ca, idx)
	_ca = append(_ca, query...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []interface{}); ok {
		r0 = rf(idx, query...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// SetCache provides a mock function with given fields: idx, items
func (_m *Repository) SetCache(idx string, items ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, idx)
	_ca = append(_ca, items...)
	_m.Called(_ca...)
}

// SetKey provides a mock function with given fields: key, value
func (_m *Repository) SetKey(key string, value ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, value...)
	_m.Called(_ca...)
}
