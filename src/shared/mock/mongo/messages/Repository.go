// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package messages

import (
	messages "github.com/cloudsrc/api.awaymail.v1.go/src/domain/messages"
	mock "github.com/stretchr/testify/mock"
	bson "gopkg.in/mgo.v2/bson"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindInbox provides a mock function with given fields: selector
func (_m *Repository) FindInbox(selector interface{}) (*messages.Message, error) {
	ret := _m.Called(selector)

	var r0 *messages.Message
	if rf, ok := ret.Get(0).(func(interface{}) *messages.Message); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInbox provides a mock function with given fields: skip, userID
func (_m *Repository) GetInbox(skip int, userID bson.ObjectId) ([]messages.Message, error) {
	ret := _m.Called(skip, userID)

	var r0 []messages.Message
	if rf, ok := ret.Get(0).(func(int, bson.ObjectId) []messages.Message); ok {
		r0 = rf(skip, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, bson.ObjectId) error); ok {
		r1 = rf(skip, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertInbox provides a mock function with given fields: _a0
func (_m *Repository) InsertInbox(_a0 *messages.Message) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*messages.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertSentBox provides a mock function with given fields: _a0
func (_m *Repository) InsertSentBox(_a0 *messages.Message) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*messages.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
