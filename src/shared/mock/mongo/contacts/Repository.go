// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package contacts

import (
	contacts "github.com/cloudsrc/api.awaymail.v1.go/src/domain/contacts"
	mock "github.com/stretchr/testify/mock"

	models "github.com/cloudsrc/api.awaymail.v1.go/src/shared/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: entity
func (_m *Repository) Add(entity *contacts.Contacts) (*contacts.Contacts, error) {
	ret := _m.Called(entity)

	var r0 *contacts.Contacts
	if rf, ok := ret.Get(0).(func(*contacts.Contacts) *contacts.Contacts); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contacts.Contacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*contacts.Contacts) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Repository) Get(id string) (*contacts.Contacts, error) {
	ret := _m.Called(id)

	var r0 *contacts.Contacts
	if rf, ok := ret.Get(0).(func(string) *contacts.Contacts); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contacts.Contacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: user
func (_m *Repository) GetList(user models.UserSession) ([]*contacts.Contacts, error) {
	ret := _m.Called(user)

	var r0 []*contacts.Contacts
	if rf, ok := ret.Get(0).(func(models.UserSession) []*contacts.Contacts); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*contacts.Contacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.UserSession) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: entity
func (_m *Repository) Update(entity *contacts.Contacts) (*contacts.Contacts, error) {
	ret := _m.Called(entity)

	var r0 *contacts.Contacts
	if rf, ok := ret.Get(0).(func(*contacts.Contacts) *contacts.Contacts); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contacts.Contacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*contacts.Contacts) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
