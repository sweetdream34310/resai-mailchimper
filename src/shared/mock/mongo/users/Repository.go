// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package users

import (
	users "github.com/cloudsrc/api.awaymail.v1.go/src/domain/users"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: entity
func (_m *Repository) AddUser(entity *users.User) (*users.User, error) {
	ret := _m.Called(entity)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(*users.User) *users.User); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.User) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: email
func (_m *Repository) GetUser(email string) (*users.User, error) {
	ret := _m.Called(email)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: email, authToken, refreshToken
func (_m *Repository) UpdateUser(email string, authToken string, refreshToken string) error {
	ret := _m.Called(email, authToken, refreshToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, authToken, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
