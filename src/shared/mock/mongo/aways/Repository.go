// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package aways

import (
	aways "github.com/cloudsrc/api.awaymail.v1.go/src/domain/aways"
	bson "gopkg.in/mgo.v2/bson"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateAway provides a mock function with given fields: req
func (_m *Repository) CreateAway(req *aways.Away) (*aways.Away, error) {
	ret := _m.Called(req)

	var r0 *aways.Away
	if rf, ok := ret.Get(0).(func(*aways.Away) *aways.Away); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aways.Away)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*aways.Away) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAway provides a mock function with given fields: awayID
func (_m *Repository) DeleteAway(awayID bson.ObjectId) error {
	ret := _m.Called(awayID)

	var r0 error
	if rf, ok := ret.Get(0).(func(bson.ObjectId) error); ok {
		r0 = rf(awayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAway provides a mock function with given fields: awayID
func (_m *Repository) GetAway(awayID bson.ObjectId) (*aways.Away, error) {
	ret := _m.Called(awayID)

	var r0 *aways.Away
	if rf, ok := ret.Get(0).(func(bson.ObjectId) *aways.Away); ok {
		r0 = rf(awayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aways.Away)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(awayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAwayList provides a mock function with given fields: userID
func (_m *Repository) GetAwayList(userID bson.ObjectId) ([]*aways.Away, error) {
	ret := _m.Called(userID)

	var r0 []*aways.Away
	if rf, ok := ret.Get(0).(func(bson.ObjectId) []*aways.Away); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aways.Away)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAway provides a mock function with given fields: req
func (_m *Repository) UpdateAway(req *aways.Away) (*aways.Away, error) {
	ret := _m.Called(req)

	var r0 *aways.Away
	if rf, ok := ret.Get(0).(func(*aways.Away) *aways.Away); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aways.Away)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*aways.Away) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAwayMode provides a mock function with given fields: isEnabled, userID
func (_m *Repository) UpdateAwayMode(isEnabled bool, userID bson.ObjectId) (int, error) {
	ret := _m.Called(isEnabled, userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(bool, bson.ObjectId) int); ok {
		r0 = rf(isEnabled, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, bson.ObjectId) error); ok {
		r1 = rf(isEnabled, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
