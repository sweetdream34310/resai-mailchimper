// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package messages

import (
	context "github.com/cloudsrc/api.awaymail.v1.go/src/shared/utils/context"
	gmail "google.golang.org/api/gmail/v1"

	messages "github.com/cloudsrc/api.awaymail.v1.go/src/usecase/messages"

	mock "github.com/stretchr/testify/mock"

	models "github.com/cloudsrc/api.awaymail.v1.go/src/shared/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: ctxSess, messageId
func (_m *Service) DeleteMessage(ctxSess *context.Context, messageId string) error {
	ret := _m.Called(ctxSess, messageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, string) error); ok {
		r0 = rf(ctxSess, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessage provides a mock function with given fields: ctxSess, queue
func (_m *Service) GetMessage(ctxSess *context.Context, queue *messages.MessageQueue) (interface{}, error) {
	ret := _m.Called(ctxSess, queue)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*context.Context, *messages.MessageQueue) interface{}); ok {
		r0 = rf(ctxSess, queue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, *messages.MessageQueue) error); ok {
		r1 = rf(ctxSess, queue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentMessage provides a mock function with given fields: ctxSess, queue
func (_m *Service) GetSentMessage(ctxSess *context.Context, queue *messages.MessageQueue) (interface{}, error) {
	ret := _m.Called(ctxSess, queue)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*context.Context, *messages.MessageQueue) interface{}); ok {
		r0 = rf(ctxSess, queue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, *messages.MessageQueue) error); ok {
		r1 = rf(ctxSess, queue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInbox provides a mock function with given fields: ctxSess, user, req
func (_m *Service) GetUserInbox(ctxSess *context.Context, user models.UserSession, req messages.InboxReq) (messages.InboxResp, error) {
	ret := _m.Called(ctxSess, user, req)

	var r0 messages.InboxResp
	if rf, ok := ret.Get(0).(func(*context.Context, models.UserSession, messages.InboxReq) messages.InboxResp); ok {
		r0 = rf(ctxSess, user, req)
	} else {
		r0 = ret.Get(0).(messages.InboxResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, models.UserSession, messages.InboxReq) error); ok {
		r1 = rf(ctxSess, user, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSent provides a mock function with given fields: ctxSess, user, req
func (_m *Service) GetUserSent(ctxSess *context.Context, user models.UserSession, req messages.InboxSentReq) ([]interface{}, error) {
	ret := _m.Called(ctxSess, user, req)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*context.Context, models.UserSession, messages.InboxSentReq) []interface{}); ok {
		r0 = rf(ctxSess, user, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, models.UserSession, messages.InboxSentReq) error); ok {
		r1 = rf(ctxSess, user, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SentMessage provides a mock function with given fields: ctxSess, user, req
func (_m *Service) SentMessage(ctxSess *context.Context, user models.UserSession, req messages.SendMessageReq) error {
	ret := _m.Called(ctxSess, user, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, models.UserSession, messages.SendMessageReq) error); ok {
		r0 = rf(ctxSess, user, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMessage provides a mock function with given fields: ctxSess, messageId, req
func (_m *Service) UpdateMessage(ctxSess *context.Context, messageId string, req messages.UpdateRequest) (*gmail.Message, error) {
	ret := _m.Called(ctxSess, messageId, req)

	var r0 *gmail.Message
	if rf, ok := ret.Get(0).(func(*context.Context, string, messages.UpdateRequest) *gmail.Message); ok {
		r0 = rf(ctxSess, messageId, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gmail.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, string, messages.UpdateRequest) error); ok {
		r1 = rf(ctxSess, messageId, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
