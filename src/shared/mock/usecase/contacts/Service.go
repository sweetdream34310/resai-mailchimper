// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package contacts

import (
	context "github.com/cloudsrc/api.awaymail.v1.go/src/shared/utils/context"
	contacts "github.com/cloudsrc/api.awaymail.v1.go/src/usecase/contacts"

	domaincontacts "github.com/cloudsrc/api.awaymail.v1.go/src/domain/contacts"

	mock "github.com/stretchr/testify/mock"

	models "github.com/cloudsrc/api.awaymail.v1.go/src/shared/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddContacts provides a mock function with given fields: ctxSess, req, user
func (_m *Service) AddContacts(ctxSess *context.Context, req contacts.ContactAddReq, user models.UserSession) (interface{}, error) {
	ret := _m.Called(ctxSess, req, user)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*context.Context, contacts.ContactAddReq, models.UserSession) interface{}); ok {
		r0 = rf(ctxSess, req, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, contacts.ContactAddReq, models.UserSession) error); ok {
		r1 = rf(ctxSess, req, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContacts provides a mock function with given fields: ctxSess, id, user
func (_m *Service) DeleteContacts(ctxSess *context.Context, id string, user models.UserSession) error {
	ret := _m.Called(ctxSess, id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*context.Context, string, models.UserSession) error); ok {
		r0 = rf(ctxSess, id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContactsList provides a mock function with given fields: ctxSess, user
func (_m *Service) GetContactsList(ctxSess *context.Context, user models.UserSession) (interface{}, error) {
	ret := _m.Called(ctxSess, user)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*context.Context, models.UserSession) interface{}); ok {
		r0 = rf(ctxSess, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, models.UserSession) error); ok {
		r1 = rf(ctxSess, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentContactsList provides a mock function with given fields: ctxSess, user
func (_m *Service) GetRecentContactsList(ctxSess *context.Context, user models.UserSession) (interface{}, error) {
	ret := _m.Called(ctxSess, user)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*context.Context, models.UserSession) interface{}); ok {
		r0 = rf(ctxSess, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, models.UserSession) error); ok {
		r1 = rf(ctxSess, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContacts provides a mock function with given fields: ctxSess, req, user
func (_m *Service) UpdateContacts(ctxSess *context.Context, req contacts.ContactUpdateReq, user models.UserSession) (*domaincontacts.Contacts, error) {
	ret := _m.Called(ctxSess, req, user)

	var r0 *domaincontacts.Contacts
	if rf, ok := ret.Get(0).(func(*context.Context, contacts.ContactUpdateReq, models.UserSession) *domaincontacts.Contacts); ok {
		r0 = rf(ctxSess, req, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domaincontacts.Contacts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*context.Context, contacts.ContactUpdateReq, models.UserSession) error); ok {
		r1 = rf(ctxSess, req, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
